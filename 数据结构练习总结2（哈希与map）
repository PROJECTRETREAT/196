/*这次操作的题目是模拟的词典。
题目详情：
你刚从滑铁卢搬到了一个大城市，这里的人们讲一种难以理解的外语方言。幸运的是，你有一本字典来帮助你理解它们。

输入格式:
输入第一行是正整数N和M,后面是N行字典条目（最多10000条），然后是M行要翻译的外语单词（最多10000个）。每一个字典条目都包含一个英语单词，后面跟着一个空格和一个外语单词。 输入中的每个单词都由最多10个小写字母组成。

输出格式:
输出翻译后的英文单词，每行一个单词。非词典中的外来词汇输出“eh”。

输入样例:
5 3
dog ogday
cat atcay
pig igpay
froot ootfray
loops oopslay
atcay
ittenkay
oopslay

输出样例:
cat
eh
loops

分析部分：由于应对本周的复习内容，先尝试在本题中本不该使用哈希法。需要处理关键字是字符数组的哈希函数，筛选之下选择了BKDRHash函数处理。
为此也学习了许多处理字符数组的哈希函数。网址如下
https://blog.csdn.net/mylinchi/article/details/79508112
实际编写代码如下
*/

#include<bits/stdc++.h>
using namespace std;
unsigned int BKDRHash(char *str);
typedef struct ct
{
	char o[11];
	char t[11];
};
void output(unsigned int h, char* str, ct* zd, int m);
unsigned int BKDRHash(char *str)
{
	int seed = 31;
	int hash = 0;
	while (*str)
	{
		hash = hash * seed + (*str++);
	}
	return (unsigned int)hash;
}
void output(unsigned int h, char* str, ct* zd,int m)
{
	int i = 0;
	while (strlen(zd[h].o)<=10&&h<=m+1)
	{
		if (strcmp(zd[h].t, str)==0)
		{
			cout << zd[h].o << endl;
			i = 1; break;
		}
		h++;
		if (h == m + 2)h = 0;	 
	}
	if (i == 0)
		cout << "eh" << endl;
}
int main()
{
	int m, n;
	cin >> m;
	cin >> n;
	ct* zd = (ct*)malloc(sizeof(ct) *(m + 2));
	for (int i = 0; i < m; i++)
	{
		char tempo[11], tempt[11];
		cin >> tempo;
		cin >> tempt;
		unsigned int midhash = BKDRHash(tempt);
		unsigned int finalhash = midhash%m;
		int a = strlen(zd[finalhash].o);
		while (strlen(zd[finalhash].o)<=10) 
		{ 
			if (finalhash == m + 1)
			{
				finalhash = 0;
			}
			finalhash++;
		}
		strcpy(zd[finalhash].o, tempo);
		strcpy(zd[finalhash].t, tempt);
	}
	for (int k = 0; k < n; k++)
	{
		char in[11];
		cin >> in;
		unsigned int hasha = BKDRHash(in);
		unsigned int hashb = hasha%m;
		output(hashb, in, zd,m);
	}
	return 0;
}

/*这个程序是完全能够完成词典的任务的，但是由于哈希法的时间复杂度不稳定而且也偏高，所以运行超时并不能通过测试点。

练习哈希法的目的已经达到，所以再采用正常简便的算法吧。
这里要运用到map容器
相关知识链接入下
https://blog.csdn.net/weixin_43828245/article/details/90214494
自己补充一点：
map<string, string>::iterator iter 创建map迭代器相当于游标
iter->first 指向当前位置关键字
iter->second 指向当前位置关键字的值
字符数组和字符串的首地址指针常量为c_str()
ac代码如下
*/
#include<bits/stdc++.h>
using namespace std;
int main()
{
	int m;
	int n;
	cin >> m;
    cin >> n;
	map<string, string> mymap;
	for (int i = 0; i != m; ++i) 
	{
		char s1[12], s2[12];
		scanf("%s %s", s1, s2);
		mymap[s2] = s1;
	}
	getchar();
	for (int i = 0; i != n; ++i)
	{
		char s[12];
		scanf("%s", s);
		map<string, string>::iterator k;
		k = mymap.find(s);
		if (k != mymap.end()) 
		{
			printf("%s\n", k->second.c_str());
		}
		else 
		{
		printf("eh\n");
		}
	}
	return 0;
}

